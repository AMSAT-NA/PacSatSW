;WB1FJ Mods 12/2019
SDA_PIN	   .equ  16		; Default compare value (will be overwritten by CPU)
SCL_PIN    .equ  14		; Default compare value (will be overwritten by CPU)
;DUMMY_PIN1  .equ 2
;DUMMY_PIN2  .equ 2
Master_Start 	SUB   {src1 = REM, src2 = ZERO, remote = CurrSTAT, dest=A, data=0, hr_data=0x0} ;data field save the byte to be transfered.AA ;0x1555603;0x1275E03
;data field 31-30, 10b, start bit
;data field 29-22, AAh, data bits, the last one could be R/W
;data field 21, 1b, ACK bit
;data field 20-19, 01b, Stop bit
;data field 18, Generate transmit interrupt? 1 generate, 0 not generate
;bit field 10/17, 1b, data ready?
;bit field 9/16, 1b, start bit included? which means it is address, R/W, data bytes
;bit field 8/15, 0b, include stop bit? used for repeated start bit. 1- stop bit include; 0- no stop bit. This bit only takes effect if start bit is set too
;hr field 14:7, 3, bytes to be transfered

Check_Stat0 	BR    {next = Check_Stat1, cond_addr= State0,event=ZERO}
;if stat0 check if data arrived

State0   	AND { src1=REM,src2=ONES,dest=R,remote=Master_Start,data=0};saves the R/W bit
Clear_Time2	MOV32 { remote=TimeOut2CNT,type=IMTOREG&REM,reg=A,data=0,hr_data=0};
Clear_Time6	MOV32 { remote=TimeOut6CNT,type=IMTOREG&REM,reg=A,data=0,hr_data=0};
Clear_Time9	MOV32 { remote=TimeOut9CNT,type=IMTOREG&REM,reg=A,data=0,hr_data=0};
NewDataFlag 	AND   {src1 = R, src2 = IMM, dest=A, data=0x400, hr_data=0} ; And 0x1000, bit 17 is data ready to transfer bit
CheckNewData 	BR    {next = ClearREM, cond_addr= Master_Start,event=ZERO}
ClearREM   	MOV32 { remote=Master_Start,type=IMTOREG&REM,reg=A,data=0};
CheckTranInt 	AND   {src1 = R, src2 = IMM, dest=A, data=0x800, hr_data=0} ; And 0x2000, bit 18 is transfer interrupt enable bit
GeneTranInt   BR { next=SCLWave,cond_addr=SCLWave,event=NZ,irq=ON};
SCLWave   	MOV32 { remote=SCL_SHFT,type=IMTOREG&REM,reg=A,data=0x1555555,hr_data=0x2A};
GetData 	AND   {src1 = R, src2 = IMM, dest=T, data=0x07FF000, hr_data=0} ; keep data, stop, remove bit 8-10 - start, stop, ready bit
CheckStart   AND { src1=R,src2=IMM,dest=NONE,rdest=REM,remote=Isaddress,data=0x200,hr_data=0};save the address bit 
StartYes 	BR    {next = AddStartBit, cond_addr= NoStartBit,event=ZERO}
;if start, copy number of bytes to ByteRecTran, copy R/W bit to State0, add 10b to the beginning
AddStartBit 	OR { src1=T,src2=IMM,dest=NONE,rdest=REM,remote=SDA_SHFT,data=0x1000000,hr_data=0};
RestoreRead   MOV32 { remote=Isread,z_cond=OFF,type=IMTOREG&REM,reg=A,data=0x07F9400,hr_data=0};
InvR_W 	XOR { src1=R,src2=IMM,dest=S,data=0x008000,hr_data=0};
CpyR_W 	AND { src1=S,src2=IMM,dest=NONE,rdest=REM,remote=State0,data=0x008100,hr_data=0};save R/W and the "stop include"
;if not repeated start, move the bytes to ByteRecTran
;IfRepStart 	AND   {src1 = R, src2 = IMM, dest=A, remote = State0, data=0x100, hr_data=0} ; And 0x100, bit 15 is start ready to transfe
;RepStartYes 	BR    {next = SDA_SHFT, cond_addr= CpyBytes,event=ZERO}
CpyBytes   AND { src1=R,src2=IMM,dest=NONE,rdest=REM,next=SDA_SHFT,remote=ByteRecTran,data=0x0000FF,hr_data=0};
;if not start, shift 2 more to the beginning
NoStartBit   OR { src1=T,src2=ZERO,dest=NONE,rdest=REM,remote=SDA_SHFT,smode=LSL,scount=2,data=0};
GoStat4	   MOV32 { next=SDA_SHFT,remote=CurrSTAT,type=IMTOREG&REM,reg=NONE,data=4,hr_data=0};

;send start bit
Check_Stat1 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=1, hr_data=0}
;Stat1BR	 	BR    {next = Check_Stat2, cond_addr= State1,event=ZERO}
;State1	 	CNT     {reg = B, max= 2, irq = OFF,data=0}
;Wait_Stat1 	BR    {next = Master_Start, cond_addr= SCL_SHFT,event=ZERO}
Stat1BR	 	BR    {next = Check_Stat2, cond_addr= SCL_SHFT,event=ZERO}
		
Check_Stat2 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=2, hr_data=0}
Stat2BR	 	BR    {next = Check_Stat3, cond_addr= State2,event=ZERO}
;State2	 	BR    {next = TimeOut2CNT, cond_addr= State2CNT, pin = SCL_PIN, event=HIGH}
State2	 	BR    {next = TimeOut2CNT, cond_addr= SDA_SHFT, pin = SCL_PIN, event=HIGH}
TimeOut2CNT 	CNT     {reg = B, max= 0x1FFF, irq = OFF,data=0} ;timeout
TimeOut2OCU   BR { next=Master_Start,cond_addr=TimeOUTOCU,event=Z,irq=ON};

;State2CNT 	CNT     {reg = B, max= 2, irq = OFF,data=0} ;		
;Wait_Stat2 	BR {next = Master_Start, cond_addr= SDA_SHFT, event=zero} ;

Check_Stat3 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=3, hr_data=0}
Stat3BR	 	BR    {next = Check_Stat4, cond_addr= SCL_SHFT,event=ZERO}
;State3	 	CNT     {reg = B, max= 2, irq = OFF,data=0}
;WaitStat3 	BR    {next = Master_Start, cond_addr= SCL_SHFT,event=ZERO}

Check_Stat4 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=4, hr_data=0}
Stat4BR	 	BR    {next = Check_Stat5, cond_addr= SDA_SHFT,event=ZERO}

Check_Stat5 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=5, hr_data=0}
Stat5BR	 	BR    {next = Check_Stat6, cond_addr= SCL_SHFT,event=ZERO}
;State5	 	CNT     {reg = B, max= 2, irq = OFF,data=0}
;WaitStat5 	BR    {next = Master_Start, cond_addr= SCL_SHFT,event=ZERO}

Check_Stat6 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=6, hr_data=0}
Stat6BR	 	BR    {next = Check_Stat7, cond_addr= State6,event=ZERO}
State6	 	BR    {next = TimeOut6CNT, cond_addr= ShiftBitIn,pin = SCL_PIN, event=HIGH}
TimeOut6CNT 	CNT     { reg = B, max= 0x1FFF, irq = OFF,data=0} ;timeout
TimeOut6OCU   BR { next=Master_Start,cond_addr=SCL_SHFT,event=Z,irq=ON};
;State6CNT 	CNT     { reg = B, max= 2, irq = OFF,data=0} ;		
;Wait_Stat6 	BR {next = ShifReady, cond_addr= BitCNT, event=zero} ;
;ShifReady 	ECMP{next = Master_Start, cond_addr= ShiftBitIn, reg = B, en_pin_action = OFF, hr_lr=HIGH, pin = DUMMY_PIN1, data = 0x1, hr_data = 0}
ShiftBitIn   SHFT { next=BitCNT,smode=ILL,cond_addr=BitCNT,cond=UNC,pin=SDA_PIN,reg=NONE,data=0};
 
BitCNT	 	CNT { reg = B, max= 8, irq = OFF,data=0} ;8bits+1ACK
ByteReady   BR { next=NextData,cond_addr=CleanRecDat,event=Z,irq=OFF};
NextData   	MOV32 { next=SCL_SHFT,remote=CurrSTAT,type=IMTOREG&REM,reg=A,data=3};
CleanRecDat 	OR { src1=REM,src2=ZERO,dest=IMM,remote=ShiftBitIn, data = 0}; ;receive data/ack saved

Isaddress   OR { src1=REM,src2=IMM,dest=S,remote=State0,smode=LSR,scount=16,data=0,hr_data=0};shift 16 bit to remove the "include stop?" bit 
NotAddress   BR { next=CheckACK,cond_addr=ByteRecTran,event=Z,irq=ON};generate receive interrupt

CheckACK  AND   {src1 = REM, src2 = IMM, dest=A, remote = CleanRecDat, data=0x0000001, hr_data=0} ; And 0x000080,ACK	
ByteRecTran   DJZ { next=GenINTNACK,cond_addr=CheckStop,reg=B,irq=OFF,data=0};
GenINTNACK   BR { next=CheckLast,cond_addr=CheckLast,event=NZ,irq=ON};

;ByteNotFull 	BR {next = Isaddress, cond_addr= SCL_SHFT, event=zero} ;
;when do I expect an ACK? 1) address 2)transmit and not the last data



;check read or write
CheckLast   OR { src1=REM,src2=ZERO,dest=A,remote=ByteRecTran,data=0,hr_data=0};
Islast   MOV32 { remote=Isread,z_cond=ON,type=IMTOREG&REM,reg=A,data=0x07FD400,hr_data=0};master receive will not send ACK for  the last byte
CheckRW2 AND   {src1 = REM, src2 = IMM, dest=A, remote = State0, data=0x008000, hr_data=0} ; And 0x1, read or write
Isread   MOV32 { next=GoStat0,remote=Master_Start,z_cond=ON,type=IMTOREG&REM,reg=A,data=0x07F9400,hr_data=0};

CheckStop 	AND   {src1 = REM, src2 = IMM, dest=A, remote = State0, data=0x100, hr_data=0} ; And 0x100, "include stop bit?" 1 - include, 0 - not include
StopYes	 	BR    {next =GoStat0 , cond_addr=SCL_SHFT ,event=NZ}; data ready trigger interrupt

GoStat0	   MOV32 { next=SCL_SHFT,remote=CurrSTAT,type=IMTOREG&REM,reg=NONE,data=0x1FFF,hr_data=0};

;stop bit
Check_Stat7 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=7, hr_data=0}
Stat7BR	 	BR    {next = Check_Stat8, cond_addr= SDA_SHFT,event=ZERO}

Check_Stat8 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=8, hr_data=0}
Stat8BR	 	BR    {next = Check_Stat9, cond_addr= SCL_SHFT,event=ZERO}
;State8	 	CNT     {reg = B, max= 2, irq = OFF,data=0}
;Wait_Stat8 	BR    {next = Master_Start, cond_addr= SCL_SHFT,event=ZERO}

Check_Stat9 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=9, hr_data=0}
Stat9BR	 	BR    {next = Check_Stat10, cond_addr= State9,event=ZERO}
State9	 	BR    {next = TimeOut9CNT, cond_addr= SDA_SHFT,pin = SCL_PIN, event=HIGH}
TimeOut9CNT 	CNT     {reg = B, max= 0x1FFF, irq = OFF,data=0} ;timeout
TimeOut9OCU   BR { next=Master_Start,cond_addr=TimeOUTOCU,event=Z,irq=ON};
;State9CNT 	CNT     {reg = B, max= 2, irq = OFF,data=0} ;				
;Wait_Stat9 	BR {next = Master_Start, cond_addr= SDA_SHFT, event=zero} ;
Check_Stat10 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=10, hr_data=0}
Stat10BR 	BR    {next = Master_Start, cond_addr= TimeOUTOCU,event=ZERO}
;State10 	CNT     { next= Wait_Stat10,  reg = B, max= 2, irq = OFF,data=0} ;					
;Wait_Stat10 	BR    {next = Master_Start, cond_addr= TimeOUTOCU,event=ZERO}; data ready trigger interrupt

SCL_SHFT SHFT { next=CurrSTAT,smode=OL0,prv=OFF,cond_addr=CurrSTAT,cond=UNC,pin=SCL_PIN,reg=T,irq=OFF,data=0x0};
SDA_SHFT SHFT { next=CurrSTAT,smode=OL0,prv=OFF,cond_addr=CurrSTAT,cond=UNC,pin=SDA_PIN,reg=T,irq=OFF,data=0x0};
CurrSTAT 	CNT  { next= Master_Start,  reg = B, max= 0x1FFF, irq = OFF,data=0}
TimeOUTOCU 	MOV32   { next = Master_Start, remote = CurrSTAT, type = IMTOREG&REM, REG=NONE,data = 0, hr_data=0} ;go state 0
		

